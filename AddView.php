<?php
/*
Сдесь описано использование функцианала метода, который добавляет +1 к просмотрам вашей статьи, товара или страницы, у которой с помощью метода GET передаеться ее Id. И для статей или товара есть таблица в базе данных.

Id|Articlename    |Views|
------------------------=
1 |Название 1     |56   |
2 |Название 2     |67   |
3 |Название 3     |23   |

Теперь при открытии страницы с данной статьей или товаром, к просмотрам будет добавлена 1. Данный метод основан на сессиях, потому он не защищает на 100% от задвоения по просмотрам страницы. Если пользователь откроет данную страницу в режиме инкогнито либо закроет браузер, тем самым закончив сессию. То при последующем просмотре страница будет считаться просмотренной незнакомым пользователем и к просмотру добавится 1. Если же страницу просто неоднократно открывать, то к количеству просмотров страницы будет добавлена только +1. Так как метод запоминает просмотренные пользователем старницы.


Даннный метод расчитан на использование PHP фреймфорка Yii2, однако сам принцип метода можно использовать и на других фреймворках либо же вовсе на чистом php.

Инструкция к применению:

1) Создать приватный метод в классе модели, которая работает над выводом информации на ваших страницах c id, сам класс модели должна наследоваться от класа Active Record (Если вы не знаете что такое Active Record, то советую сначало изучить ООП и что такое наследоваине в ООП, а затем изучить зачем в Yii2 существует класс Active Record)
*/

// id - это id статьи или товара в вашей таблице
// Данный метод addViewInDb увеличивает количество просмотров в таблице на 1.
    private static function addViewInDb($id)
    {
            $viewed = self::findOne($id); // помещаем в переменную viewed объект (строчку) из таблицы с данным.
            $viewed->views++; // обращаемся к полю таблицы views и добавляем к его значению +1.
            $viewed->save(); // сохраняем измененное значение в бд.
    }

/*

2) Создаем метод addViewSession который проверяет была ли страница со статьей, товаром с таким id просмотрен. Сдесь основная логика такая, если статья не просмотрена, то создаем двумерный массив в сессии, который будет выглядеть так: ['quest'][$id] = $id, т.е сдесь в элементе с ключом quest лежат элементы у которых ключ и значение ранвы id вашей статьи или товара. Содание именно двухмерного массива сделано для удобства обращения и проверок на наличие элементов массива.
Сессия, а в ней:
['quest'][1] = 1
['quest'][2] = 1
['quest'][3] = 2
['quest'][4] = 3
А когда мы открываем статью или товар с id равным например 1, то созданный метод проверяет, а есть ли у нас в сессии массив с ключом quest, в котором лежит элемент ключ которого и значение совпадает с id нашей статьи, если нет, создает такой элемент, и прибавляет +1 к просмотрам статьи, если же в сессии уже лежит такой массив с таким элементом, то значит данная статья или товар уже просмотрены.

Параметр quest в методе объявлен для того, чтобы, если у вас в сессии уже есть массив с таким ключом, то была возможность заменить его

*/
    public function addViewSession($id,$guest = 'quest')
    {
        $session = Yii::$app->session;

        $session->open();

        
        if(isset($session[$guest]))
        {
            if(isset($session[$guest][$id]))
            {
                // echo 'уже посмотрели стаью';
                $session->close();
            }
            else
            {
                // echo 'впервые смотрим эту статью';
                $session[$guest] += [ 
                    $id=>$id 
                ];
                self::addViewInDb($id);
                $session->close();
            }
        }
        else
        {
            // echo 'впервые вообще смотрим статьи';
            $session[$guest] = [
                $id=>$id ];

            self::addViewInDb($id);
            $session->close();

        }
        		// Для отладки
                // $session->remove($guest); 
                // var_dump($session[$guest]); 
    }
 ?>